/* * Upload - jQuery Plugin * * NOTICE OF LICENSE * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/osl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to contact@parsimony-cms.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade Parsimony to newer * versions in the future. If you wish to customize Parsimony for your * needs please refer to http://www.parsimony.mobi for more information. * * @authors Julien Gras et Benoît Lorillot * @copyright Julien Gras et Benoît Lorillot *  * @category  Upload - jQuery Plugin * Requires: jQuery v1.4.2+ * @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0) */(function( $ ){    var methods = {	init : function( options ) {	    params = $.extend( {		nbFiles: 1,		maxSize: 1000000000,		readFiles: false,		allowedFiles: "all", /* "image.*"*/		ajaxFile: "",		ajaxFileParams: {},		start: function(){},		onProgress: function(){},		stop: function(){},		onClientLoadFile: function(){},		onServerLoadFile: function(){}	    }, options);	    	    return this.each(function() {		var $this = $(this);		$this.data('uploadParams',params.ajaxFileParams);		$this.on("dragenter.parsimonyUpload",function(event){		    $(this).addClass("dragover");		    return false;		});		$this.on("dragover.parsimonyUpload",function(event){		    return false;		});		$this.on("dragleave.parsimonyUpload",function(event){		    $(this).removeClass("dragover");		    return false;		});		$this.add('input[type="file"]',$this).on("drop.parsimonyUpload change.parsimonyUpload",function(event){		    event.stopPropagation();		    event.preventDefault();		    if (event.type == 'change') var files = this.files;		    else var files = event.originalEvent.dataTransfer.files;		    var count = files.length;		    if (params.nbFiles < count) count = params.nbFiles;		    for (var i = 0; i < count; i++) {			var file = files[i];			if((params.allowedFiles == "all" || files[i].type.match(new RegExp(allowedFiles,"g")))){			    if(params.maxSize > file.size){				params.start(file);				if (params.readFiles){				    var reader = new FileReader();				    reader.onloadend = params.onClientLoadFile(file,reader);				    reader.readAsDataURL(files);				}				var fd = new FormData();				fd.append("fileField", files[0]);				$.each($this.data('uploadParams'), function(i, val) {				    fd.append(i, val);				});				var xhr = new XMLHttpRequest();				xhr.open("POST", params.ajaxFile);				xhr.upload.file = xhr.file = file;				xhr.upload.addEventListener("progress", function (event) {				    if (event.lengthComputable) {					var progress = (event.loaded / event.total) * 100;					params.onProgress(event.target.file,progress);				    }				}, false);				xhr.addEventListener("load", function(event){				    params.stop(jQuery.parseJSON(event.target.response));				    params.onServerLoadFile()				}, false);				xhr.send(fd);			    }			}		    }		});	    });	},	changeUploadParams : function(ajaxFileParams) {	    return this.each(function(){		$(this).data('uploadParams',ajaxFileParams);	    })	},	destroy : function( ) {	    return this.each(function(){		$(this).off('.parsimonyUpload');	    })	}    };    $.fn.parsimonyUpload = function( method ) {	if ( methods[method] ) {	    return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));	} else if ( typeof method === 'object' || ! method ) {	    return methods.init.apply( this, arguments );	} else {	    $.error( 'Method ' +  method + ' does not exist on jQuery.parsimonyUpload' );	}          };})( jQuery );